// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role     @default(USER)
  chats         Chat[]
  recepientRequest       Request[] @relation("recepient")
  sentRequests           Request[] @relation("sender")
  messages      Message[]
  accounts      Account[]
  sessions      Session[]
}



model Chat {
  id     String    @id @default(cuid())
  participants  User[] 
  messages Message[]  @relation("chat-messages")
  lastMessage Message? 
  createdAt    DateTime  @default(now())  
}




model Message {
  id     String    @id @default(cuid())
  content String

  sender User @relation(fields: [userId], references: [id])
  userId String

  chat Chat  @relation("chat-messages",  fields: [chatId], references: [id])
  chatId String

  chatLastMessage Chat @relation(fields: [chatLastMessageId], references: [id])
  chatLastMessageId String @unique

  createdAt DateTime @default(now())
}

enum RequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Request {
  id      String    @id @default(cuid())

  sender  User @relation("sender",fields: [senderId], references: [id])
  recipient User @relation("recepient", fields: [recipientId], references: [id])

  senderId String
  recipientId String

  status RequestStatus @default(PENDING)

  createdAt      DateTime @default(now())

  @@unique([senderId, recipientId])
  
}





model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}




model Post {
  id     String   @id @default(cuid())
  name String
}